# -*- coding: utf-8 -*-
"""P11(1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QAwYUZtRlMZUa4RatQocLuVHKcbFDQNO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset


from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

data = pd.read_csv('/content/AI_ML.csv')


data = data.replace({',': ''}, regex=True)
data = data.apply(pd.to_numeric, errors='coerce')

X = data.iloc[:, :10].values
y = data.iloc[:, 10].values


scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.08, random_state=42)

mean = scaler.mean_
std = scaler.scale_

print("Mean:", mean)
print("Standard Deviation:", std)

X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)

X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
y_test_tensor = torch.tensor(y_test, dtype=torch.float32).view(-1, 1)

train_data = TensorDataset(X_train_tensor, y_train_tensor)

batch_size = 32
train_loader = DataLoader(dataset=train_data, batch_size=batch_size, shuffle=True)

class MLP(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(MLP, self).__init__()


        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.LeakyReLU()
        self.fc2 = nn.Linear(hidden_size, hidden_size)
        self.relu1 = nn.LeakyReLU()
        self.fc3 =nn.Linear( hidden_size, output_size)

    def forward(self, x):

        x = self.fc1(x)
        x = self.relu(x)
        x = self.fc2(x)
        x = self.relu1(x)
        x = self.fc3(x)
        return x

model = MLP(input_size=10, hidden_size=72, output_size=1)
criterion = nn.MSELoss()
optimizer = optim.AdamW(model.parameters(), lr=0.001, weight_decay=1e-4)

num_epochs = 2000
epoch_losses = []
r2_scores = []
for epoch in range(num_epochs):
    model.train()
    total_loss = 0.0
    for inputs, targets in train_loader:
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()

    avg_loss = total_loss / len(train_loader)
    epoch_losses.append(avg_loss)

    with torch.no_grad():
        predicted_values = model(inputs)
        r2 = r2_score(targets.cpu().numpy(), predicted_values.cpu().numpy())
        r2_scores.append(r2)

    if (epoch + 1) % 100 == 0:
        print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {avg_loss:.4f}, R²: {r2:.4f}')

plt.figure(figsize=(10, 6))
plt.plot(range(1, num_epochs + 1), epoch_losses, label='Training Loss',  color='b')

plt.xlabel('Epochs', fontsize=14, fontweight='bold')
plt.ylabel('Loss', fontsize=14, fontweight='bold')
plt.xlim(1, num_epochs)
plt.ylim(0, 1)

plt.xticks(fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')

plt.legend(fontsize=12, loc='upper right', frameon=True, prop={'weight': 'bold'})

plt.gca().spines['top'].set_linewidth(2)
plt.gca().spines['right'].set_linewidth(2)
plt.gca().spines['bottom'].set_linewidth(2)
plt.gca().spines['left'].set_linewidth(2)

plt.show()

plt.figure(figsize=(10, 6))
plt.plot(range(1, num_epochs + 1), r2_scores, label='R² Score', color='green')
plt.xlabel('Epochs', fontsize=14, fontweight='bold')
plt.ylabel('R² Score', fontsize=14, fontweight='bold')
plt.ylim(0.95, 1)
plt.xticks(fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')
plt.legend(fontsize=12, loc='lower right', frameon=True, prop={'weight': 'bold'})
plt.gca().spines['top'].set_linewidth(2)
plt.gca().spines['right'].set_linewidth(2)
plt.gca().spines['bottom'].set_linewidth(2)
plt.gca().spines['left'].set_linewidth(2)
plt.show()

model.eval()

with torch.no_grad():
    predictions = model(X_test_tensor)


criterion = nn.MSELoss()
test_loss = criterion(predictions, y_test_tensor)


print(f'Test MSE Loss: {test_loss.item():.4f}')

y_test_mean = y_test_tensor.mean()
total_sum_of_squares = ((y_test_tensor - y_test_mean) ** 2).sum()
residual_sum_of_squares = ((y_test_tensor - predictions) ** 2).sum()

r2_score = 1 - (residual_sum_of_squares / total_sum_of_squares)
print(f'R² Score: {r2_score:.4f}')

y_test_np = y_test_tensor.numpy()
y_pred_np = predictions.numpy()


df = pd.DataFrame({
    'True Values': y_test_np.flatten(),
    'Predicted Values': y_pred_np.flatten()
})

print(df[:])

true_values = df['True Values']
predicted_values = df['Predicted Values']


plt.figure(figsize=(8, 6))
plt.scatter(true_values, predicted_values, color='blue', alpha=1, label='Predicted vs True')


plt.plot([true_values.min(), true_values.max()], [true_values.min(), true_values.max()], color='red', linestyle='--', label='Perfect Prediction')


plt.xlabel('True Values', fontsize=14, fontweight='bold')
plt.ylabel('Predicted Values', fontsize=14, fontweight='bold')
plt.xticks(fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')
plt.legend(fontsize=12, loc='upper left', frameon=True, prop={'weight': 'bold'})
plt.gca().spines['top'].set_linewidth(2)
plt.gca().spines['right'].set_linewidth(2)
plt.gca().spines['bottom'].set_linewidth(2)
plt.gca().spines['left'].set_linewidth(2)
plt.show()

torch.save(model, 'first_model_final.pth')
import warnings
warnings.filterwarnings('ignore', category=FutureWarning)

model = torch.load('/content/first_model_final.pth')


model.eval()


example_input = torch.tensor([250,23,12000,70,10,70,1,10,100,25]).float()
example_input_normalized = (example_input - torch.tensor(mean, dtype=torch.float32)) / torch.tensor(std, dtype=torch.float32)


with torch.no_grad():
    output = model(example_input_normalized)
    print(output)


def permutation_importance(model, X_test, y_test, num_repeats=10):
    baseline_predictions = model(X_test).detach().numpy().flatten()
    baseline_mse = np.mean((baseline_predictions - y_test.numpy())**2)

    feature_importance = np.zeros(X_test.shape[1])

    for i in range(X_test.shape[1]):
        scores = []
        for _ in range(num_repeats):
            X_test_permuted = X_test.clone()
            X_test_permuted[:, i] = X_test_permuted[:, i][torch.randperm(X_test.shape[0])]
            permuted_predictions = model(X_test_permuted).detach().numpy().flatten()
            permuted_mse = np.mean((permuted_predictions - y_test.numpy())**2)
            scores.append(permuted_mse)

        feature_importance[i] = np.mean(scores) - baseline_mse

    return feature_importance


importance_scores = permutation_importance(model, X_test_tensor, y_test_tensor)


feature_names = data.columns[:10]
plt.figure(figsize=(10, 6))
plt.barh(feature_names, importance_scores, color="skyblue")
plt.xlabel("Importance Score (MSE Increase)", fontsize=14, fontweight='bold')
plt.xticks(fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')
plt.gca().invert_yaxis()
plt.gca().spines['top'].set_linewidth(2)
plt.gca().spines['right'].set_linewidth(2)
plt.gca().spines['bottom'].set_linewidth(2)
plt.gca().spines['left'].set_linewidth(2)
plt.show()




correlation_matrix = pd.DataFrame(X, columns=data.columns[:10]).corr()


plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=1)
plt.xticks(fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')
plt.show()

feature_names = data.columns[:10]


for i in range(len(feature_names)):
    plt.figure(figsize=(6, 4))
    sns.scatterplot(x=X[:, i], y=y, alpha=0.6, edgecolor="black", color="royalblue")
    plt.xlabel(feature_names[i], fontsize=14, fontweight='bold')
    plt.ylabel("Thickness (µm)", fontsize=14, fontweight='bold')
    plt.xticks(fontsize=12, fontweight='bold')
    plt.yticks(fontsize=12, fontweight='bold')
    plt.grid(True)
    plt.gca().spines['top'].set_linewidth(2)
    plt.gca().spines['right'].set_linewidth(2)
    plt.gca().spines['bottom'].set_linewidth(2)
    plt.gca().spines['left'].set_linewidth(2)
    plt.show()



X1 = X[:, 0]
X2 = X[:, 2]
Y = y

fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

ax.scatter(X1, X2, Y, c=Y, cmap="viridis", marker="o", alpha=0.6)

plt.show()
